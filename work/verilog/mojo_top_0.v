/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input middle_button,
    input up_button,
    input down_button,
    input left_button,
    input right_button,
    output reg [7:0] r_red,
    output reg [7:0] r_blue,
    output reg [7:0] col
  );
  
  
  
  reg rst;
  
  integer i;
  
  integer j;
  
  reg [7:0] x;
  
  reg [7:0] y;
  
  reg [7:0] a;
  
  reg [2:0] random_x;
  
  reg [2:0] random_y;
  
  reg [63:0] blue_map;
  
  reg [63:0] red_map;
  
  reg [63:0] char_on_map;
  
  reg [7:0] bool;
  
  reg [63:0] temp_bomb_map;
  
  wire [8-1:0] M_alu_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  alu_1 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu_out(M_alu_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_mid_out;
  reg [1-1:0] M_edge_detector_mid_in;
  edge_detector_3 edge_detector_mid (
    .clk(clk),
    .in(M_edge_detector_mid_in),
    .out(M_edge_detector_mid_out)
  );
  wire [1-1:0] M_middle_button_cond_out;
  reg [1-1:0] M_middle_button_cond_in;
  button_conditioner_4 middle_button_cond (
    .clk(clk),
    .in(M_middle_button_cond_in),
    .out(M_middle_button_cond_out)
  );
  wire [1-1:0] M_edge_detector_up_out;
  reg [1-1:0] M_edge_detector_up_in;
  edge_detector_3 edge_detector_up (
    .clk(clk),
    .in(M_edge_detector_up_in),
    .out(M_edge_detector_up_out)
  );
  wire [1-1:0] M_up_button_cond_out;
  reg [1-1:0] M_up_button_cond_in;
  button_conditioner_4 up_button_cond (
    .clk(clk),
    .in(M_up_button_cond_in),
    .out(M_up_button_cond_out)
  );
  wire [1-1:0] M_edge_detector_down_out;
  reg [1-1:0] M_edge_detector_down_in;
  edge_detector_3 edge_detector_down (
    .clk(clk),
    .in(M_edge_detector_down_in),
    .out(M_edge_detector_down_out)
  );
  wire [1-1:0] M_down_button_cond_out;
  reg [1-1:0] M_down_button_cond_in;
  button_conditioner_4 down_button_cond (
    .clk(clk),
    .in(M_down_button_cond_in),
    .out(M_down_button_cond_out)
  );
  wire [1-1:0] M_edge_detector_left_out;
  reg [1-1:0] M_edge_detector_left_in;
  edge_detector_3 edge_detector_left (
    .clk(clk),
    .in(M_edge_detector_left_in),
    .out(M_edge_detector_left_out)
  );
  wire [1-1:0] M_left_button_cond_out;
  reg [1-1:0] M_left_button_cond_in;
  button_conditioner_4 left_button_cond (
    .clk(clk),
    .in(M_left_button_cond_in),
    .out(M_left_button_cond_out)
  );
  wire [1-1:0] M_edge_detector_right_out;
  reg [1-1:0] M_edge_detector_right_in;
  edge_detector_3 edge_detector_right (
    .clk(clk),
    .in(M_edge_detector_right_in),
    .out(M_edge_detector_right_out)
  );
  wire [1-1:0] M_right_button_cond_out;
  reg [1-1:0] M_right_button_cond_in;
  button_conditioner_4 right_button_cond (
    .clk(clk),
    .in(M_right_button_cond_in),
    .out(M_right_button_cond_out)
  );
  wire [1-1:0] M_clock_edge_out;
  reg [1-1:0] M_clock_edge_in;
  edge_detector_13 clock_edge (
    .clk(clk),
    .in(M_clock_edge_in),
    .out(M_clock_edge_out)
  );
  reg [24:0] M_clock_d, M_clock_q = 1'h0;
  reg [25:0] M_transition_clock_d, M_transition_clock_q = 1'h0;
  reg [2:0] M_transition_counter_d, M_transition_counter_q = 1'h0;
  wire [32-1:0] M_pn_gen_num;
  reg [1-1:0] M_pn_gen_next;
  reg [32-1:0] M_pn_gen_seed;
  pn_gen_14 pn_gen (
    .clk(clk),
    .rst(rst),
    .next(M_pn_gen_next),
    .seed(M_pn_gen_seed),
    .num(M_pn_gen_num)
  );
  wire [64-1:0] M_char_map_map;
  reg [3-1:0] M_char_map_x_pos;
  reg [3-1:0] M_char_map_y_pos;
  character_map_15 char_map (
    .clk(clk),
    .rst(rst),
    .x_pos(M_char_map_x_pos),
    .y_pos(M_char_map_y_pos),
    .map(M_char_map_map)
  );
  reg [63:0] M_bombs_on_map_d, M_bombs_on_map_q = 1'h0;
  wire [8-1:0] M_display_red_r_red;
  wire [8-1:0] M_display_red_c_red;
  reg [64-1:0] M_display_red_red;
  display_red_16 display_red (
    .clk(clk),
    .rst(rst),
    .red(M_display_red_red),
    .r_red(M_display_red_r_red),
    .c_red(M_display_red_c_red)
  );
  wire [8-1:0] M_display_blue_r_blue;
  wire [8-1:0] M_display_blue_c_blue;
  reg [64-1:0] M_display_blue_blue;
  display_blue_17 display_blue (
    .clk(clk),
    .rst(rst),
    .blue(M_display_blue_blue),
    .r_blue(M_display_blue_r_blue),
    .c_blue(M_display_blue_c_blue)
  );
  reg [449:0] M_allbombs_d, M_allbombs_q = 1'h0;
  reg [44:0] M_bomb_x_d, M_bomb_x_q = 1'h0;
  reg [44:0] M_bomb_y_d, M_bomb_y_q = 1'h0;
  reg [14:0] M_bomb_start_d, M_bomb_start_q = 1'h0;
  reg [3:0] M_bomb_count_d, M_bomb_count_q = 1'h0;
  reg [2:0] M_current_pos_x_d, M_current_pos_x_q = 3'h4;
  reg [2:0] M_current_pos_y_d, M_current_pos_y_q = 3'h4;
  reg [1:0] M_current_level_d, M_current_level_q = 1'h1;
  reg [3:0] M_total_bombs_per_level_d, M_total_bombs_per_level_q = 3'h5;
  localparam IDLE_bombergame = 3'd0;
  localparam TRANSITION_bombergame = 3'd1;
  localparam UPDATE_MAP_bombergame = 3'd2;
  localparam STAGE_bombergame = 3'd3;
  localparam WIN_bombergame = 3'd4;
  localparam LOSE_bombergame = 3'd5;
  
  reg [2:0] M_bombergame_d, M_bombergame_q = IDLE_bombergame;
  
  always @* begin
    M_bombergame_d = M_bombergame_q;
    M_allbombs_d = M_allbombs_q;
    M_clock_d = M_clock_q;
    M_bomb_y_d = M_bomb_y_q;
    M_transition_counter_d = M_transition_counter_q;
    M_bomb_x_d = M_bomb_x_q;
    M_current_pos_x_d = M_current_pos_x_q;
    M_total_bombs_per_level_d = M_total_bombs_per_level_q;
    M_bombs_on_map_d = M_bombs_on_map_q;
    M_current_level_d = M_current_level_q;
    M_transition_clock_d = M_transition_clock_q;
    M_bomb_count_d = M_bomb_count_q;
    M_current_pos_y_d = M_current_pos_y_q;
    M_bomb_start_d = M_bomb_start_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_middle_button_cond_in = middle_button;
    M_edge_detector_mid_in = M_middle_button_cond_out;
    M_up_button_cond_in = up_button;
    M_edge_detector_up_in = M_up_button_cond_out;
    M_down_button_cond_in = down_button;
    M_edge_detector_down_in = M_down_button_cond_out;
    M_left_button_cond_in = left_button;
    M_edge_detector_left_in = M_left_button_cond_out;
    M_right_button_cond_in = right_button;
    M_edge_detector_right_in = M_right_button_cond_out;
    M_clock_edge_in = M_transition_clock_q[23+0-:1];
    M_pn_gen_next = 1'h1;
    M_pn_gen_seed = 1'h0;
    M_clock_d = M_clock_q + 1'h1;
    random_x = M_pn_gen_num[0+2-:3];
    random_y = M_pn_gen_num[3+2-:3];
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 6'h00;
    for (i = 1'h0; i < 4'hf; i = i + 1) begin
      if (M_bomb_start_q[(i)*1+0-:1] == 1'h1 && M_allbombs_q[(i)*30+29-:30] != 30'h3fffffff) begin
        M_allbombs_d[(i)*30+29-:30] = M_allbombs_q[(i)*30+29-:30] + 1'h1;
      end else begin
        if (M_bomb_start_q[(i)*1+0-:1] == 1'h1 && M_allbombs_q[(i)*30+29-:30] > 30'h2fffffff) begin
          M_allbombs_d[(i)*30+29-:30] = 30'h3fffffff;
        end else begin
          M_allbombs_d[(i)*30+29-:30] = 1'h0;
        end
      end
    end
    
    case (M_bombergame_q)
      IDLE_bombergame: begin
        M_bomb_count_d = 1'h0;
        M_bombs_on_map_d = 64'h0000000000000000;
        M_char_map_x_pos = M_current_pos_x_q;
        M_char_map_y_pos = M_current_pos_y_q;
        for (i = 1'h0; i < 4'hf; i = i + 1) begin
          M_bomb_start_d[(i)*1+0-:1] = 1'h0;
          M_bomb_x_d[(i)*3+2-:3] = 1'h0;
          M_bomb_y_d[(i)*3+2-:3] = 1'h0;
          M_allbombs_d[(i)*30+29-:30] = 1'h0;
        end
        
        case (M_current_level_q)
          1'h1: begin
            M_total_bombs_per_level_d = 3'h5;
          end
          2'h2: begin
            M_total_bombs_per_level_d = 4'ha;
          end
          2'h3: begin
            M_total_bombs_per_level_d = 4'hf;
          end
        endcase
        if (M_edge_detector_mid_out) begin
          M_transition_clock_d = 1'h0;
          M_transition_counter_d = 1'h0;
          M_bombergame_d = TRANSITION_bombergame;
        end
      end
      TRANSITION_bombergame: begin
        M_transition_clock_d = M_transition_clock_q + 1'h1;
        if (M_transition_clock_q[25+0-:1] == 1'h1) begin
          M_bombergame_d = STAGE_bombergame;
        end
      end
      UPDATE_MAP_bombergame: begin
        if (M_edge_detector_mid_out) begin
          M_current_level_d = 1'h1;
          M_bombergame_d = IDLE_bombergame;
        end
        if (M_bomb_count_q == M_total_bombs_per_level_q && M_bombs_on_map_q == 64'h0000000000000000) begin
          M_bombergame_d = WIN_bombergame;
        end
        M_alu_a = random_x;
        M_alu_b = M_current_pos_x_q;
        M_alu_alufn = 6'h33;
        x = M_alu_alu_out;
        M_alu_a = random_y;
        M_alu_b = M_current_pos_y_q;
        M_alu_alufn = 6'h33;
        y = M_alu_alu_out;
        if (M_clock_q == 25'h1ffffff && M_bomb_count_q < M_total_bombs_per_level_q && (x & y) != 1'h1 && M_bombs_on_map_q[(random_y)*8+(random_x)*1+0-:1] == 1'h0) begin
          M_bombs_on_map_d[(random_y)*8+(random_x)*1+0-:1] = 1'h1;
          M_bomb_start_d[(M_bomb_count_q)*1+0-:1] = 1'h1;
          M_bomb_x_d[(M_bomb_count_q)*3+2-:3] = random_x;
          M_bomb_y_d[(M_bomb_count_q)*3+2-:3] = random_y;
          M_bomb_count_d = M_bomb_count_q + 1'h1;
        end
        if (M_current_pos_x_q < 3'h7 && M_edge_detector_right_out) begin
          M_current_pos_x_d = M_current_pos_x_q + 1'h1;
        end else begin
          if (M_current_pos_x_q > 1'h0 && M_edge_detector_left_out) begin
            M_current_pos_x_d = M_current_pos_x_q - 1'h1;
          end else begin
            if (M_current_pos_y_q < 3'h7 && M_edge_detector_up_out) begin
              M_current_pos_y_d = M_current_pos_y_q + 1'h1;
            end else begin
              if (M_current_pos_y_q > 1'h0 && M_edge_detector_down_out) begin
                M_current_pos_y_d = M_current_pos_y_q - 1'h1;
              end
            end
          end
        end
        if (M_bombs_on_map_q[(M_current_pos_y_q)*8+(M_current_pos_x_q)*1+0-:1] == 1'h1) begin
          M_bombs_on_map_d[(M_current_pos_y_q)*8+(M_current_pos_x_q)*1+0-:1] = 1'h0;
          for (i = 1'h0; i < M_total_bombs_per_level_q; i = i + 1) begin
            if (M_bomb_x_q[(i)*3+2-:3] == M_current_pos_x_q && M_bomb_y_q[(i)*3+2-:3] == M_current_pos_y_q && M_bomb_start_q[(i)*1+0-:1] == 1'h1) begin
              M_bomb_start_d[(i)*1+0-:1] = 1'h0;
            end
          end
        end
        for (i = 1'h0; i < M_total_bombs_per_level_q; i = i + 1) begin
          if (M_allbombs_q[(i)*30+29-:30] == 30'h3fffffff) begin
            M_bombergame_d = LOSE_bombergame;
          end
        end
      end
      STAGE_bombergame: begin
        if (M_edge_detector_mid_out) begin
          if (M_current_level_q <= 2'h3) begin
            M_current_level_d = M_current_level_q + 1'h1;
            M_bombergame_d = UPDATE_MAP_bombergame;
          end else begin
            M_current_level_d = 1'h1;
            M_bombergame_d = WIN_bombergame;
          end
        end
      end
      WIN_bombergame: begin
        M_current_pos_x_d = 3'h4;
        M_current_pos_y_d = 3'h4;
        if (M_current_level_q > 2'h3) begin
          M_current_level_d = 1'h1;
        end
        if (M_edge_detector_mid_out) begin
          M_bombergame_d = IDLE_bombergame;
        end
      end
      LOSE_bombergame: begin
        M_current_pos_x_d = 3'h4;
        M_current_pos_y_d = 3'h4;
        M_current_level_d = 1'h1;
        M_transition_clock_d = M_transition_clock_q + 1'h1;
        if (M_edge_detector_mid_out) begin
          M_transition_clock_d = 1'h0;
          M_bombergame_d = IDLE_bombergame;
        end
      end
    endcase
    M_char_map_x_pos = M_current_pos_x_q;
    M_char_map_y_pos = M_current_pos_y_q;
    M_display_red_red = M_bombs_on_map_q;
    M_display_blue_blue = M_char_map_map;
    if (M_bombergame_q == IDLE_bombergame) begin
      blue_map[0+0+7-:8] = 8'hff;
      blue_map[8+0+7-:8] = 8'hff;
      blue_map[16+0+7-:8] = 8'hff;
      blue_map[24+0+7-:8] = 8'hff;
      blue_map[32+0+7-:8] = 8'hff;
      blue_map[40+0+7-:8] = 8'hff;
      blue_map[48+0+7-:8] = 8'hff;
      blue_map[56+0+7-:8] = 8'hff;
      M_display_blue_blue = blue_map;
      r_blue = M_display_blue_r_blue;
      r_red = 8'hff;
      col = M_display_blue_c_blue;
    end else begin
      if (M_bombergame_q == STAGE_bombergame) begin
        blue_map = 64'h0000000000000000;
        
        case (M_current_level_q)
          1'h1: begin
            blue_map[0+0+7-:8] = 8'h00;
            blue_map[8+0+7-:8] = 8'h18;
            blue_map[16+0+7-:8] = 8'h1c;
            blue_map[24+0+7-:8] = 8'h18;
            blue_map[32+0+7-:8] = 8'h18;
            blue_map[40+0+7-:8] = 8'h18;
            blue_map[48+0+7-:8] = 8'h18;
            blue_map[56+0+7-:8] = 8'h00;
          end
          2'h2: begin
            blue_map[0+0+7-:8] = 8'h00;
            blue_map[8+0+7-:8] = 8'h18;
            blue_map[16+0+7-:8] = 8'h24;
            blue_map[24+0+7-:8] = 8'h20;
            blue_map[32+0+7-:8] = 8'h10;
            blue_map[40+0+7-:8] = 8'h08;
            blue_map[48+0+7-:8] = 8'h3c;
            blue_map[56+0+7-:8] = 8'h00;
          end
          2'h3: begin
            blue_map[0+0+7-:8] = 8'h00;
            blue_map[8+0+7-:8] = 8'h18;
            blue_map[16+0+7-:8] = 8'h24;
            blue_map[24+0+7-:8] = 8'h20;
            blue_map[32+0+7-:8] = 8'h38;
            blue_map[40+0+7-:8] = 8'h20;
            blue_map[48+0+7-:8] = 8'h24;
            blue_map[56+0+7-:8] = 8'h18;
          end
        endcase
        M_display_blue_blue = blue_map;
        r_blue = M_display_blue_r_blue;
        r_red = 8'hff;
        col = M_display_blue_c_blue;
      end else begin
        if (M_bombergame_q == WIN_bombergame) begin
          blue_map[0+0+7-:8] = 8'h00;
          blue_map[8+0+7-:8] = 8'h80;
          blue_map[16+0+7-:8] = 8'h40;
          blue_map[24+0+7-:8] = 8'h20;
          blue_map[32+0+7-:8] = 8'h11;
          blue_map[40+0+7-:8] = 8'h0a;
          blue_map[48+0+7-:8] = 8'h04;
          blue_map[56+0+7-:8] = 8'h00;
          M_display_blue_blue = blue_map;
          r_blue = M_display_blue_r_blue;
          r_red = 8'hff;
          col = M_display_blue_c_blue;
        end else begin
          if (M_bombergame_q == LOSE_bombergame) begin
            red_map[0+0+7-:8] = 8'h00;
            red_map[8+0+7-:8] = 8'h0c;
            red_map[16+0+7-:8] = 8'h0c;
            red_map[24+0+7-:8] = 8'h0c;
            red_map[32+0+7-:8] = 8'h0c;
            red_map[40+0+7-:8] = 8'h3c;
            red_map[48+0+7-:8] = 8'h3c;
            red_map[56+0+7-:8] = 8'h00;
            if (M_clock_edge_out) begin
              M_transition_counter_d = M_transition_counter_q + 1'h1;
            end
            
            case (M_transition_counter_q)
              1'h0: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h00;
                red_map[16+0+7-:8] = 8'h00;
                red_map[24+0+7-:8] = 8'h18;
                red_map[32+0+7-:8] = 8'h18;
                red_map[40+0+7-:8] = 8'h00;
                red_map[48+0+7-:8] = 8'h00;
                red_map[56+0+7-:8] = 8'h00;
              end
              1'h1: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h00;
                red_map[16+0+7-:8] = 8'h3c;
                red_map[24+0+7-:8] = 8'h3c;
                red_map[32+0+7-:8] = 8'h3c;
                red_map[40+0+7-:8] = 8'h3c;
                red_map[48+0+7-:8] = 8'h00;
                red_map[56+0+7-:8] = 8'h00;
              end
              2'h2: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h7e;
                red_map[16+0+7-:8] = 8'h7e;
                red_map[24+0+7-:8] = 8'h7e;
                red_map[32+0+7-:8] = 8'h7e;
                red_map[40+0+7-:8] = 8'h7e;
                red_map[48+0+7-:8] = 8'h7e;
                red_map[56+0+7-:8] = 8'h00;
              end
              2'h3: begin
                red_map[0+0+7-:8] = 8'hff;
                red_map[8+0+7-:8] = 8'hff;
                red_map[16+0+7-:8] = 8'hff;
                red_map[24+0+7-:8] = 8'hff;
                red_map[32+0+7-:8] = 8'hff;
                red_map[40+0+7-:8] = 8'hff;
                red_map[48+0+7-:8] = 8'hff;
                red_map[56+0+7-:8] = 8'hff;
              end
              3'h4: begin
                red_map[0+0+7-:8] = 8'hff;
                red_map[8+0+7-:8] = 8'hff;
                red_map[16+0+7-:8] = 8'hff;
                red_map[24+0+7-:8] = 8'hff;
                red_map[32+0+7-:8] = 8'hff;
                red_map[40+0+7-:8] = 8'hff;
                red_map[48+0+7-:8] = 8'hff;
                red_map[56+0+7-:8] = 8'hff;
              end
              3'h5: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h7e;
                red_map[16+0+7-:8] = 8'h7e;
                red_map[24+0+7-:8] = 8'h7e;
                red_map[32+0+7-:8] = 8'h7e;
                red_map[40+0+7-:8] = 8'h7e;
                red_map[48+0+7-:8] = 8'h7e;
                red_map[56+0+7-:8] = 8'h00;
              end
              3'h6: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h00;
                red_map[16+0+7-:8] = 8'h3c;
                red_map[24+0+7-:8] = 8'h3c;
                red_map[32+0+7-:8] = 8'h3c;
                red_map[40+0+7-:8] = 8'h3c;
                red_map[48+0+7-:8] = 8'h00;
                red_map[56+0+7-:8] = 8'h00;
              end
              3'h7: begin
                red_map[0+0+7-:8] = 8'h00;
                red_map[8+0+7-:8] = 8'h00;
                red_map[16+0+7-:8] = 8'h00;
                red_map[24+0+7-:8] = 8'h18;
                red_map[32+0+7-:8] = 8'h18;
                red_map[40+0+7-:8] = 8'h00;
                red_map[48+0+7-:8] = 8'h00;
                red_map[56+0+7-:8] = 8'h00;
              end
            endcase
            M_display_red_red = red_map;
            r_red = M_display_red_r_red;
            r_blue = 8'hff;
            col = M_display_red_c_red;
          end else begin
            if (M_bombergame_q == TRANSITION_bombergame) begin
              blue_map[0+0+7-:8] = 8'hff;
              blue_map[8+0+7-:8] = 8'hff;
              blue_map[16+0+7-:8] = 8'hff;
              blue_map[24+0+7-:8] = 8'hff;
              blue_map[32+0+7-:8] = 8'hff;
              blue_map[40+0+7-:8] = 8'hff;
              blue_map[48+0+7-:8] = 8'hff;
              blue_map[56+0+7-:8] = 8'hff;
              if (M_clock_edge_out) begin
                M_transition_counter_d = M_transition_counter_q + 1'h1;
              end
              
              case (M_transition_counter_q)
                1'h0: begin
                  blue_map[0+0+7-:8] = 8'hff;
                  blue_map[8+0+7-:8] = 8'hff;
                  blue_map[16+0+7-:8] = 8'hff;
                  blue_map[24+0+7-:8] = 8'hff;
                  blue_map[32+0+7-:8] = 8'hff;
                  blue_map[40+0+7-:8] = 8'hff;
                  blue_map[48+0+7-:8] = 8'hff;
                  blue_map[56+0+7-:8] = 8'hff;
                end
                1'h1: begin
                  blue_map[0+0+7-:8] = 8'h00;
                  blue_map[8+0+7-:8] = 8'h7e;
                  blue_map[16+0+7-:8] = 8'h7e;
                  blue_map[24+0+7-:8] = 8'h7e;
                  blue_map[32+0+7-:8] = 8'h7e;
                  blue_map[40+0+7-:8] = 8'h7e;
                  blue_map[48+0+7-:8] = 8'h7e;
                  blue_map[56+0+7-:8] = 8'h00;
                end
                2'h2: begin
                  blue_map[0+0+7-:8] = 8'h00;
                  blue_map[8+0+7-:8] = 8'h00;
                  blue_map[16+0+7-:8] = 8'h3c;
                  blue_map[24+0+7-:8] = 8'h3c;
                  blue_map[32+0+7-:8] = 8'h3c;
                  blue_map[40+0+7-:8] = 8'h3c;
                  blue_map[48+0+7-:8] = 8'h00;
                  blue_map[56+0+7-:8] = 8'h00;
                end
                2'h3: begin
                  blue_map[0+0+7-:8] = 8'h00;
                  blue_map[8+0+7-:8] = 8'h00;
                  blue_map[16+0+7-:8] = 8'h00;
                  blue_map[24+0+7-:8] = 8'h18;
                  blue_map[32+0+7-:8] = 8'h18;
                  blue_map[40+0+7-:8] = 8'h00;
                  blue_map[48+0+7-:8] = 8'h00;
                  blue_map[56+0+7-:8] = 8'h00;
                end
              endcase
              M_display_blue_blue = blue_map;
              r_blue = M_display_blue_r_blue;
              r_red = 8'hff;
              col = M_display_blue_c_blue;
            end else begin
              if (M_clock_q[5+0-:1] == 1'h1) begin
                r_red = M_display_red_r_red;
                r_blue = 8'hff;
                col = M_display_red_c_red;
              end else begin
                r_blue = M_display_blue_r_blue;
                r_red = 8'hff;
                col = M_display_blue_c_blue;
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_clock_q <= 1'h0;
      M_transition_clock_q <= 1'h0;
      M_transition_counter_q <= 1'h0;
      M_bombs_on_map_q <= 1'h0;
      M_allbombs_q <= 1'h0;
      M_bomb_x_q <= 1'h0;
      M_bomb_y_q <= 1'h0;
      M_bomb_start_q <= 1'h0;
      M_bomb_count_q <= 1'h0;
      M_current_pos_x_q <= 3'h4;
      M_current_pos_y_q <= 3'h4;
      M_current_level_q <= 1'h1;
      M_total_bombs_per_level_q <= 3'h5;
      M_bombergame_q <= 1'h0;
    end else begin
      M_clock_q <= M_clock_d;
      M_transition_clock_q <= M_transition_clock_d;
      M_transition_counter_q <= M_transition_counter_d;
      M_bombs_on_map_q <= M_bombs_on_map_d;
      M_allbombs_q <= M_allbombs_d;
      M_bomb_x_q <= M_bomb_x_d;
      M_bomb_y_q <= M_bomb_y_d;
      M_bomb_start_q <= M_bomb_start_d;
      M_bomb_count_q <= M_bomb_count_d;
      M_current_pos_x_q <= M_current_pos_x_d;
      M_current_pos_y_q <= M_current_pos_y_d;
      M_current_level_q <= M_current_level_d;
      M_total_bombs_per_level_q <= M_total_bombs_per_level_d;
      M_bombergame_q <= M_bombergame_d;
    end
  end
  
endmodule
